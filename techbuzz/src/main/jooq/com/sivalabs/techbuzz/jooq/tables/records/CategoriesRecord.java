/*
 * This file is generated by jOOQ.
 */
package com.sivalabs.techbuzz.jooq.tables.records;


import com.sivalabs.techbuzz.jooq.tables.Categories;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CategoriesRecord extends UpdatableRecordImpl<CategoriesRecord> implements Record8<Long, String, String, String, String, Integer, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.categories.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.categories.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.categories.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.categories.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.categories.slug</code>.
     */
    public void setSlug(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.categories.slug</code>.
     */
    public String getSlug() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.categories.description</code>.
     */
    public void setDescription(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.categories.description</code>.
     */
    public String getDescription() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.categories.image</code>.
     */
    public void setImage(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.categories.image</code>.
     */
    public String getImage() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.categories.display_order</code>.
     */
    public void setDisplayOrder(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.categories.display_order</code>.
     */
    public Integer getDisplayOrder() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>public.categories.created_at</code>.
     */
    public void setCreatedAt(LocalDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.categories.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>public.categories.updated_at</code>.
     */
    public void setUpdatedAt(LocalDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.categories.updated_at</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, String, String, String, String, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Long, String, String, String, String, Integer, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Categories.CATEGORIES.ID;
    }

    @Override
    public Field<String> field2() {
        return Categories.CATEGORIES.NAME;
    }

    @Override
    public Field<String> field3() {
        return Categories.CATEGORIES.SLUG;
    }

    @Override
    public Field<String> field4() {
        return Categories.CATEGORIES.DESCRIPTION;
    }

    @Override
    public Field<String> field5() {
        return Categories.CATEGORIES.IMAGE;
    }

    @Override
    public Field<Integer> field6() {
        return Categories.CATEGORIES.DISPLAY_ORDER;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return Categories.CATEGORIES.CREATED_AT;
    }

    @Override
    public Field<LocalDateTime> field8() {
        return Categories.CATEGORIES.UPDATED_AT;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getSlug();
    }

    @Override
    public String component4() {
        return getDescription();
    }

    @Override
    public String component5() {
        return getImage();
    }

    @Override
    public Integer component6() {
        return getDisplayOrder();
    }

    @Override
    public LocalDateTime component7() {
        return getCreatedAt();
    }

    @Override
    public LocalDateTime component8() {
        return getUpdatedAt();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getSlug();
    }

    @Override
    public String value4() {
        return getDescription();
    }

    @Override
    public String value5() {
        return getImage();
    }

    @Override
    public Integer value6() {
        return getDisplayOrder();
    }

    @Override
    public LocalDateTime value7() {
        return getCreatedAt();
    }

    @Override
    public LocalDateTime value8() {
        return getUpdatedAt();
    }

    @Override
    public CategoriesRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public CategoriesRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public CategoriesRecord value3(String value) {
        setSlug(value);
        return this;
    }

    @Override
    public CategoriesRecord value4(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public CategoriesRecord value5(String value) {
        setImage(value);
        return this;
    }

    @Override
    public CategoriesRecord value6(Integer value) {
        setDisplayOrder(value);
        return this;
    }

    @Override
    public CategoriesRecord value7(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public CategoriesRecord value8(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public CategoriesRecord values(Long value1, String value2, String value3, String value4, String value5, Integer value6, LocalDateTime value7, LocalDateTime value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CategoriesRecord
     */
    public CategoriesRecord() {
        super(Categories.CATEGORIES);
    }

    /**
     * Create a detached, initialised CategoriesRecord
     */
    public CategoriesRecord(Long id, String name, String slug, String description, String image, Integer displayOrder, LocalDateTime createdAt, LocalDateTime updatedAt) {
        super(Categories.CATEGORIES);

        setId(id);
        setName(name);
        setSlug(slug);
        setDescription(description);
        setImage(image);
        setDisplayOrder(displayOrder);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
        resetChangedOnNotNull();
    }
}
