/*
 * This file is generated by jOOQ.
 */
package com.sivalabs.techbuzz.jooq.tables;


import com.sivalabs.techbuzz.jooq.Keys;
import com.sivalabs.techbuzz.jooq.Public;
import com.sivalabs.techbuzz.jooq.tables.records.VotesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Votes extends TableImpl<VotesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.votes</code>
     */
    public static final Votes VOTES = new Votes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VotesRecord> getRecordType() {
        return VotesRecord.class;
    }

    /**
     * The column <code>public.votes.id</code>.
     */
    public final TableField<VotesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.votes.user_id</code>.
     */
    public final TableField<VotesRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.votes.post_id</code>.
     */
    public final TableField<VotesRecord, Long> POST_ID = createField(DSL.name("post_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.votes.val</code>.
     */
    public final TableField<VotesRecord, Integer> VAL = createField(DSL.name("val"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.votes.created_at</code>.
     */
    public final TableField<VotesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.votes.updated_at</code>.
     */
    public final TableField<VotesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6), this, "");

    private Votes(Name alias, Table<VotesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Votes(Name alias, Table<VotesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.votes</code> table reference
     */
    public Votes(String alias) {
        this(DSL.name(alias), VOTES);
    }

    /**
     * Create an aliased <code>public.votes</code> table reference
     */
    public Votes(Name alias) {
        this(alias, VOTES);
    }

    /**
     * Create a <code>public.votes</code> table reference
     */
    public Votes() {
        this(DSL.name("votes"), null);
    }

    public <O extends Record> Votes(Table<O> child, ForeignKey<O, VotesRecord> key) {
        super(child, key, VOTES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<VotesRecord, Long> getIdentity() {
        return (Identity<VotesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<VotesRecord> getPrimaryKey() {
        return Keys.VOTES_PKEY;
    }

    @Override
    public List<UniqueKey<VotesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.VOTES_USER_ID_POST_ID_KEY);
    }

    @Override
    public List<ForeignKey<VotesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.VOTES__VOTES_USER_ID_FKEY, Keys.VOTES__VOTES_POST_ID_FKEY);
    }

    private transient Users _users;
    private transient Posts _posts;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.VOTES__VOTES_USER_ID_FKEY);

        return _users;
    }

    /**
     * Get the implicit join path to the <code>public.posts</code> table.
     */
    public Posts posts() {
        if (_posts == null)
            _posts = new Posts(this, Keys.VOTES__VOTES_POST_ID_FKEY);

        return _posts;
    }

    @Override
    public Votes as(String alias) {
        return new Votes(DSL.name(alias), this);
    }

    @Override
    public Votes as(Name alias) {
        return new Votes(alias, this);
    }

    @Override
    public Votes as(Table<?> alias) {
        return new Votes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Votes rename(String name) {
        return new Votes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Votes rename(Name name) {
        return new Votes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Votes rename(Table<?> name) {
        return new Votes(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, Long, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super Long, ? super Long, ? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super Long, ? super Long, ? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
