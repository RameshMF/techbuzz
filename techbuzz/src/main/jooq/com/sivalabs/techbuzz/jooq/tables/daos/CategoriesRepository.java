/*
 * This file is generated by jOOQ.
 */
package com.sivalabs.techbuzz.jooq.tables.daos;


import com.sivalabs.techbuzz.jooq.tables.Categories;
import com.sivalabs.techbuzz.jooq.tables.pojos.JooqCategories;
import com.sivalabs.techbuzz.jooq.tables.records.CategoriesRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class CategoriesRepository extends DAOImpl<CategoriesRecord, JooqCategories, Long> {

    /**
     * Create a new CategoriesRepository without any configuration
     */
    public CategoriesRepository() {
        super(Categories.CATEGORIES, JooqCategories.class);
    }

    /**
     * Create a new CategoriesRepository with an attached configuration
     */
    @Autowired
    public CategoriesRepository(Configuration configuration) {
        super(Categories.CATEGORIES, JooqCategories.class, configuration);
    }

    @Override
    public Long getId(JooqCategories object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqCategories> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Categories.CATEGORIES.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<JooqCategories> fetchById(Long... values) {
        return fetch(Categories.CATEGORIES.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public JooqCategories fetchOneById(Long value) {
        return fetchOne(Categories.CATEGORIES.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<JooqCategories> fetchOptionalById(Long value) {
        return fetchOptional(Categories.CATEGORIES.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqCategories> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Categories.CATEGORIES.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<JooqCategories> fetchByName(String... values) {
        return fetch(Categories.CATEGORIES.NAME, values);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public JooqCategories fetchOneByName(String value) {
        return fetchOne(Categories.CATEGORIES.NAME, value);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public Optional<JooqCategories> fetchOptionalByName(String value) {
        return fetchOptional(Categories.CATEGORIES.NAME, value);
    }

    /**
     * Fetch records that have <code>slug BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqCategories> fetchRangeOfSlug(String lowerInclusive, String upperInclusive) {
        return fetchRange(Categories.CATEGORIES.SLUG, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>slug IN (values)</code>
     */
    public List<JooqCategories> fetchBySlug(String... values) {
        return fetch(Categories.CATEGORIES.SLUG, values);
    }

    /**
     * Fetch a unique record that has <code>slug = value</code>
     */
    public JooqCategories fetchOneBySlug(String value) {
        return fetchOne(Categories.CATEGORIES.SLUG, value);
    }

    /**
     * Fetch a unique record that has <code>slug = value</code>
     */
    public Optional<JooqCategories> fetchOptionalBySlug(String value) {
        return fetchOptional(Categories.CATEGORIES.SLUG, value);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqCategories> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(Categories.CATEGORIES.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<JooqCategories> fetchByDescription(String... values) {
        return fetch(Categories.CATEGORIES.DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>image BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqCategories> fetchRangeOfImage(String lowerInclusive, String upperInclusive) {
        return fetchRange(Categories.CATEGORIES.IMAGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>image IN (values)</code>
     */
    public List<JooqCategories> fetchByImage(String... values) {
        return fetch(Categories.CATEGORIES.IMAGE, values);
    }

    /**
     * Fetch records that have <code>display_order BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqCategories> fetchRangeOfDisplayOrder(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(Categories.CATEGORIES.DISPLAY_ORDER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>display_order IN (values)</code>
     */
    public List<JooqCategories> fetchByDisplayOrder(BigDecimal... values) {
        return fetch(Categories.CATEGORIES.DISPLAY_ORDER, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqCategories> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Categories.CATEGORIES.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<JooqCategories> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(Categories.CATEGORIES.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqCategories> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Categories.CATEGORIES.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<JooqCategories> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(Categories.CATEGORIES.UPDATED_AT, values);
    }
}
