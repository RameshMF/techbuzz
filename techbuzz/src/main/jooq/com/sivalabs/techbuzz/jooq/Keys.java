/*
 * This file is generated by jOOQ.
 */
package com.sivalabs.techbuzz.jooq;


import com.sivalabs.techbuzz.jooq.tables.Categories;
import com.sivalabs.techbuzz.jooq.tables.Posts;
import com.sivalabs.techbuzz.jooq.tables.Users;
import com.sivalabs.techbuzz.jooq.tables.Votes;
import com.sivalabs.techbuzz.jooq.tables.records.CategoriesRecord;
import com.sivalabs.techbuzz.jooq.tables.records.PostsRecord;
import com.sivalabs.techbuzz.jooq.tables.records.UsersRecord;
import com.sivalabs.techbuzz.jooq.tables.records.VotesRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CategoriesRecord> CATEGORIES_PKEY = Internal.createUniqueKey(Categories.CATEGORIES, DSL.name("categories_pkey"), new TableField[] { Categories.CATEGORIES.ID }, true);
    public static final UniqueKey<CategoriesRecord> CATEGORY_NAME_UNIQUE = Internal.createUniqueKey(Categories.CATEGORIES, DSL.name("category_name_unique"), new TableField[] { Categories.CATEGORIES.NAME }, true);
    public static final UniqueKey<CategoriesRecord> CATEGORY_SLUG_UNIQUE = Internal.createUniqueKey(Categories.CATEGORIES, DSL.name("category_slug_unique"), new TableField[] { Categories.CATEGORIES.SLUG }, true);
    public static final UniqueKey<PostsRecord> POSTS_PKEY = Internal.createUniqueKey(Posts.POSTS, DSL.name("posts_pkey"), new TableField[] { Posts.POSTS.ID }, true);
    public static final UniqueKey<UsersRecord> USER_EMAIL_UNIQUE = Internal.createUniqueKey(Users.USERS, DSL.name("user_email_unique"), new TableField[] { Users.USERS.EMAIL }, true);
    public static final UniqueKey<UsersRecord> USERS_PKEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_pkey"), new TableField[] { Users.USERS.ID }, true);
    public static final UniqueKey<VotesRecord> VOTES_PKEY = Internal.createUniqueKey(Votes.VOTES, DSL.name("votes_pkey"), new TableField[] { Votes.VOTES.ID }, true);
    public static final UniqueKey<VotesRecord> VOTES_USER_ID_POST_ID_KEY = Internal.createUniqueKey(Votes.VOTES, DSL.name("votes_user_id_post_id_key"), new TableField[] { Votes.VOTES.USER_ID, Votes.VOTES.POST_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<PostsRecord, CategoriesRecord> POSTS__POSTS_CAT_ID_FKEY = Internal.createForeignKey(Posts.POSTS, DSL.name("posts_cat_id_fkey"), new TableField[] { Posts.POSTS.CAT_ID }, Keys.CATEGORIES_PKEY, new TableField[] { Categories.CATEGORIES.ID }, true);
    public static final ForeignKey<PostsRecord, UsersRecord> POSTS__POSTS_CREATED_BY_FKEY = Internal.createForeignKey(Posts.POSTS, DSL.name("posts_created_by_fkey"), new TableField[] { Posts.POSTS.CREATED_BY }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<VotesRecord, PostsRecord> VOTES__VOTES_POST_ID_FKEY = Internal.createForeignKey(Votes.VOTES, DSL.name("votes_post_id_fkey"), new TableField[] { Votes.VOTES.POST_ID }, Keys.POSTS_PKEY, new TableField[] { Posts.POSTS.ID }, true);
    public static final ForeignKey<VotesRecord, UsersRecord> VOTES__VOTES_USER_ID_FKEY = Internal.createForeignKey(Votes.VOTES, DSL.name("votes_user_id_fkey"), new TableField[] { Votes.VOTES.USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
}
