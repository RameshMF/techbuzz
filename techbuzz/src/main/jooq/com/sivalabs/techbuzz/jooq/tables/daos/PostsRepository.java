/*
 * This file is generated by jOOQ.
 */
package com.sivalabs.techbuzz.jooq.tables.daos;


import com.sivalabs.techbuzz.jooq.tables.Posts;
import com.sivalabs.techbuzz.jooq.tables.pojos.JooqPosts;
import com.sivalabs.techbuzz.jooq.tables.records.PostsRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class PostsRepository extends DAOImpl<PostsRecord, JooqPosts, Long> {

    /**
     * Create a new PostsRepository without any configuration
     */
    public PostsRepository() {
        super(Posts.POSTS, JooqPosts.class);
    }

    /**
     * Create a new PostsRepository with an attached configuration
     */
    @Autowired
    public PostsRepository(Configuration configuration) {
        super(Posts.POSTS, JooqPosts.class, configuration);
    }

    @Override
    public Long getId(JooqPosts object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqPosts> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Posts.POSTS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<JooqPosts> fetchById(Long... values) {
        return fetch(Posts.POSTS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public JooqPosts fetchOneById(Long value) {
        return fetchOne(Posts.POSTS.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<JooqPosts> fetchOptionalById(Long value) {
        return fetchOptional(Posts.POSTS.ID, value);
    }

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqPosts> fetchRangeOfTitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(Posts.POSTS.TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    public List<JooqPosts> fetchByTitle(String... values) {
        return fetch(Posts.POSTS.TITLE, values);
    }

    /**
     * Fetch records that have <code>url BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqPosts> fetchRangeOfUrl(String lowerInclusive, String upperInclusive) {
        return fetchRange(Posts.POSTS.URL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>url IN (values)</code>
     */
    public List<JooqPosts> fetchByUrl(String... values) {
        return fetch(Posts.POSTS.URL, values);
    }

    /**
     * Fetch records that have <code>content BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqPosts> fetchRangeOfContent(String lowerInclusive, String upperInclusive) {
        return fetchRange(Posts.POSTS.CONTENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>content IN (values)</code>
     */
    public List<JooqPosts> fetchByContent(String... values) {
        return fetch(Posts.POSTS.CONTENT, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqPosts> fetchRangeOfCreatedBy(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Posts.POSTS.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    public List<JooqPosts> fetchByCreatedBy(Long... values) {
        return fetch(Posts.POSTS.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>cat_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqPosts> fetchRangeOfCatId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Posts.POSTS.CAT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cat_id IN (values)</code>
     */
    public List<JooqPosts> fetchByCatId(Long... values) {
        return fetch(Posts.POSTS.CAT_ID, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqPosts> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Posts.POSTS.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<JooqPosts> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(Posts.POSTS.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqPosts> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Posts.POSTS.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<JooqPosts> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(Posts.POSTS.UPDATED_AT, values);
    }
}
