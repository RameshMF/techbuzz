/*
 * This file is generated by jOOQ.
 */
package com.sivalabs.techbuzz.jooq.tables.daos;


import com.sivalabs.techbuzz.jooq.tables.Users;
import com.sivalabs.techbuzz.jooq.tables.pojos.JooqUsers;
import com.sivalabs.techbuzz.jooq.tables.records.UsersRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class UsersRepository extends DAOImpl<UsersRecord, JooqUsers, Long> {

    /**
     * Create a new UsersRepository without any configuration
     */
    public UsersRepository() {
        super(Users.USERS, JooqUsers.class);
    }

    /**
     * Create a new UsersRepository with an attached configuration
     */
    @Autowired
    public UsersRepository(Configuration configuration) {
        super(Users.USERS, JooqUsers.class, configuration);
    }

    @Override
    public Long getId(JooqUsers object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqUsers> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Users.USERS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<JooqUsers> fetchById(Long... values) {
        return fetch(Users.USERS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public JooqUsers fetchOneById(Long value) {
        return fetchOne(Users.USERS.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<JooqUsers> fetchOptionalById(Long value) {
        return fetchOptional(Users.USERS.ID, value);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqUsers> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<JooqUsers> fetchByEmail(String... values) {
        return fetch(Users.USERS.EMAIL, values);
    }

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    public JooqUsers fetchOneByEmail(String value) {
        return fetchOne(Users.USERS.EMAIL, value);
    }

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    public Optional<JooqUsers> fetchOptionalByEmail(String value) {
        return fetchOptional(Users.USERS.EMAIL, value);
    }

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqUsers> fetchRangeOfPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    public List<JooqUsers> fetchByPassword(String... values) {
        return fetch(Users.USERS.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqUsers> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<JooqUsers> fetchByName(String... values) {
        return fetch(Users.USERS.NAME, values);
    }

    /**
     * Fetch records that have <code>role BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqUsers> fetchRangeOfRole(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.ROLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>role IN (values)</code>
     */
    public List<JooqUsers> fetchByRole(String... values) {
        return fetch(Users.USERS.ROLE, values);
    }

    /**
     * Fetch records that have <code>verified BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqUsers> fetchRangeOfVerified(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Users.USERS.VERIFIED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>verified IN (values)</code>
     */
    public List<JooqUsers> fetchByVerified(Boolean... values) {
        return fetch(Users.USERS.VERIFIED, values);
    }

    /**
     * Fetch records that have <code>verification_token BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<JooqUsers> fetchRangeOfVerificationToken(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.VERIFICATION_TOKEN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>verification_token IN (values)</code>
     */
    public List<JooqUsers> fetchByVerificationToken(String... values) {
        return fetch(Users.USERS.VERIFICATION_TOKEN, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqUsers> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Users.USERS.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<JooqUsers> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(Users.USERS.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqUsers> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Users.USERS.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<JooqUsers> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(Users.USERS.UPDATED_AT, values);
    }
}
